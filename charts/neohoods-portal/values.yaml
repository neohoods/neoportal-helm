# Global variables for templating
global:
  namespace: platform
  domain: portal.neohoods.com
  chatName: neohoods
  emailTemplate:
    logoUrl: "https://portal.neohoods.com/logo-bright.png"
    appName: "NeoHoods"
postgresql:
  enabled: true
  primary:
    persistence:
      enabled: true
      size: 10Gi# Or use a secret reference
  auth:
    database: neohoods_portal
    username: neohoods_portal_user
    existingSecret: neohoods-postgresql
    secretKeys:
      adminPasswordKey: postgresql-password
      userPasswordKey: postgresql-password
      replicationPasswordKey: postgresql-password
  primary:
    persistence:
      enabled: true
      size: 10Gi
# Backend settings
backend:
  enabled: true
  debug:
    enabled: false # Set to true in dev environment
  image:
    repository: ghcr.io/neohoods/portal-platform-api
    tag: 0.0.182
  replicaCount: 2
  service:
    type: NodePort
    port: 80
    nodePort: 30096
    nodePortForDebug: 30197
  env:
    # Spring properties
    SERVER_PORT: 8486
    SPRING_PROFILES_ACTIVE: production
    SPRING_DATASOURCE_USERNAME: neohoods_portal_user
    SPRING_DATASOURCE_URL: jdbc:postgresql://neohoods-postgresql.platform.svc.cluster.local:5432/neohoods_portal
    # OpenTelemetry configuration - using existing Tempo/Loki/Prometheus stack
    MANAGEMENT_OTLP_METRICS_ENABLED: "true"
    MANAGEMENT_OTLP_TRACING_ENABLED: "true"
    MANAGEMENT_METRICS_EXPORT_OTLP_ENABLED: "true"
    MANAGEMENT_OTLP_METRICS_URL: "http://tempo.observability.svc.cluster.local:4317/v1/metrics"
    MANAGEMENT_OTLP_TRACING_URL: "http://tempo.observability.svc.cluster.local:4317/v1/traces"
    MANAGEMENT_METRICS_EXPORT_OTLP_URL: "http://tempo.observability.svc.cluster.local:4317/v1/metrics"
    # Auth0 properties
    AUTH0_DOMAIN: terresdelaya.eu.auth0.com
    AUTH0_CLIENT_ID:
      secretKeyRef:
        name: auth0-secret
        key: auth0-client-id
    AUTH0_CLIENT_SECRET:
      secretKeyRef:
        name: auth0-secret
        key: auth0-client-secret
    AUTH0_AUDIENCE: https://terresdelaya.eu.auth0.com/api/v2/
    AUTH0_CONNECTION: Username-Password-Authentication
ingress:
  certManagerClusterIssuer: letsencrypt-prod
  secretName: letsencrypt-platform
# Frontend settings
frontend:
  enabled: true
  image:
    repository: ghcr.io/neohoods/portal-platform-ui
    tag: 0.0.182
  replicaCount: 1
  service:
    type: NodePort
    port: 80
    nodePort: 30095
  env:
    API_BASE_PATH: https://portal.neohoods.com
    USE_MOCK_API: "false"
    DEMO_MODE: "false"
    DEFAULT_LOCALE: "fr"
    # Branding configuration
    BRAND_NAME: "NeoHoods"
    BRAND_DISPLAY_NAME: "Portal NeoHoods"
    BRAND_COPYRIGHT: "2025 Portal NeoHoods"
    BRAND_LOGO: "/logo-bright.png"
  theme:
    configMapName: my-custom-theme
mailersend:
  enabled: true
  apiKey:
    secretKeyRef:
      name: mailersend-secret
      key: mailersend-api-key
  from:
    email: notifications@mail.neohoods.com
    name: NeoHoods
flyway:
  enabled: true
  url: jdbc:postgresql://neohoods-postgresql.platform.svc.cluster.local:5432/neohoods_portal
  fakeData: false
  image:
    repository: flyway/flyway
    tag: latest
    pullPolicy: IfNotPresent
  config:
    schemas: public
    locations: "filesystem:/flyway/sql"
  # Custom initialization data
  customInitData:
    enabled: false
    configMapName: "portal-custom-init-data" # Name of the ConfigMap containing custom init data
    mountPath: "/flyway/sql-custom" # Mount path for custom data
    files: [] # List of SQL files with inline content
    sqlFiles: [] # List of SQL files to load from sql/ directory
